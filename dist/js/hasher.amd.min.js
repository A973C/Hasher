/*!
 * Hasher <http://github.com/millermedeiros/hasher>
 * @author Miller Medeiros
 * @version 1.0.0 (2011/08/03 10:49 PM)
 * Released under the MIT License
 */
define("hasher",["signals"],function(a){var b=(function(k){var o=25,p=k.document,c=k.location,n=k.history,u=a.Signal,f,t,m,C,e,A,r=/#(.*)$/,j=/(\?.*)|(\#.*)/,g=/^\#/,i=(!+"\v1"),y=("onhashchange" in k),d=i&&!y,q=(c.protocol==="file:");function s(E){if(!E){return""}var D=new RegExp("^\\"+f.prependHash+"|\\"+f.appendHash+"$","g");return E.replace(D,"")}function B(){var D=r.exec(f.getURL());return(D&&D[1])?decodeURIComponent(D[1]):""}function x(){return(e)?e.contentWindow.frameHash:null}function w(){e=p.createElement("iframe");e.src="about:blank";e.style.display="none";p.body.appendChild(e)}function h(){if(e&&t!==x()){var D=e.contentWindow.document;D.open();D.write("<html><head><title>"+p.title+'</title><script type="text/javascript">var frameHash="'+t+'";<\/script></head><body>&nbsp;</body></html>');D.close()}}function l(D){D=decodeURIComponent(D);if(t!==D){var E=t;t=D;if(d){h()}f.changed.dispatch(s(D),s(E))}}A=(d)?function(){var E=B(),D=x();if(D!==t&&D!==E){f.setHash(s(D))}else{if(E!==t){l(E)}}}:function(){var D=B();if(D!==t){l(D)}};function z(F,D,E){if(F.addEventListener){F.addEventListener(D,E,false)}else{if(F.attachEvent){F.attachEvent("on"+D,E)}}}function v(F,D,E){if(F.removeEventListener){F.removeEventListener(D,E,false)}else{if(F.detachEvent){F.detachEvent("on"+D,E)}}}f={VERSION:"1.0.0",appendHash:"",prependHash:"/",separator:"/",changed:new u(),stopped:new u(),initialized:new u(),init:function(){if(C){return}t=B();if(y){z(k,"hashchange",A)}else{if(d){if(!e){w()}h()}m=setInterval(A,o)}C=true;f.initialized.dispatch(s(t))},stop:function(){if(!C){return}if(y){v(k,"hashchange",A)}else{clearInterval(m);m=null}C=false;f.stopped.dispatch(s(t))},isActive:function(){return C},getURL:function(){return c.href},getBaseURL:function(){return f.getURL().replace(j,"")},setHash:function(D){var E=Array.prototype.slice.call(arguments);D=E.join(f.separator);D=D?f.prependHash+D.replace(g,"")+f.appendHash:D;if(D!==t){l(D);if(i&&q){D=D.replace(/\?/,"%3F")}c.hash="#"+encodeURI(D)}},getHash:function(){return s(t)},getHashAsArray:function(){return f.getHash().split(f.separator)},dispose:function(){f.stop();f.initialized.dispose();f.stopped.dispose();f.changed.dispose();e=f=k.hasher=null},toString:function(){return'[hasher version="'+f.VERSION+'" hash="'+f.getHash()+'"]'}};return f}(window));return b});